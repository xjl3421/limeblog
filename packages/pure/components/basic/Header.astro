---
import config from 'virtual:config'

import { Icon } from '../user'
---

<header-component
  class='group sticky top-4 z-30 md:z-50 mb-12 flex items-center justify-between rounded-xl border border-transparent max-sm:py-1 sm:rounded-2xl'
>
  <a
    class='z-30 text-xl font-semibold group-[.not-top]:ms-2 sm:group-[.not-top]:ms-3'
    style='transition:margin-inline 0.3s'
    href='/'
    aria-label='Brand'>{config.title}</a
  >

  <div class='flex items-center gap-x-2'>
    {/* Menu links - 移动端保持原样 */}
    <div
      id='headerExpandContent'
      class='end-0 start-0 top-12 grid border border-transparent group-[.not-top]:rounded-xl group-[.expanded]:opacity-100 dark:group-[.expanded.not-top]:bg-muted max-sm:absolute max-sm:opacity-0 max-sm:group-[.not-top]:border-border max-sm:group-[.expanded.not-top]:bg-background max-sm:group-[.not-top]:px-4 max-sm:group-[.not-top]:py-2 sm:hidden'
    >
      <div class='flex flex-col items-center justify-center overflow-hidden'>
        {
          config.header.menu.map((item) => (
            <a
              href={item.link}
              class='w-full flex-none grow py-2 text-right font-medium transition-none hover:text-primary'
              aria-label='Nav menu item'
            >
              {item.title}
            </a>
          ))
        }
      </div>
    </div>

    {/* 桌面端收缩后的导航栏 */}
    <div class='hidden sm:flex items-center gap-x-2 group-[.not-top]:flex'>
      {/* 搜索按钮 */}
      <a 
        class='px-2 py-2 transition-colors hover:bg-border rounded-md group-[.not-top]:rounded-xl' 
        href='/search' 
        title='Search'
      >
        <span class='sr-only'>Search</span>
        <Icon name='search' class='size-5' />
      </a>

      {/* 更多菜单 */}
      <div class='relative'>
        <button
          id='moreMenuToggle'
          class='px-2 py-2 transition-colors hover:bg-border rounded-md group-[.not-top]:rounded-xl flex items-center gap-1'
          title='More'
        >
          <span class='text-sm font-medium'>更多</span>
          <span class='size-4 transition-transform duration-200 flex items-center justify-center' id='moreMenuIcon'>
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="6,9 12,15 18,9"></polyline>
            </svg>
          </span>
        </button>
        
        {/* 更多菜单下拉 */}
        <div
          id='moreMenuDropdown'
          class='absolute right-0 top-full mt-2 w-48 bg-background border border-border rounded-xl shadow-lg opacity-0 invisible transition-all duration-200 transform translate-y-[-10px]'
        >
          <div class='py-2'>
            {
              config.header.menu.map((item) => (
                <a
                  href={item.link}
                  class='block px-4 py-2 text-sm font-medium hover:bg-muted transition-colors'
                  aria-label='Nav menu item'
                >
                  {item.title}
                </a>
              ))
            }
          </div>
        </div>
      </div>
    </div>

    {/* 常规导航 - 仅在未收缩时显示 */}
    <div class='hidden sm:flex items-center gap-x-3 group-[.not-top]:hidden'>
      {
        config.header.menu.map((item) => (
          <a
            href={item.link}
            class='px-3 py-2 font-medium transition-colors hover:text-primary'
            aria-label='Nav menu item'
          >
            {item.title}
          </a>
        ))
      }
      <a class='px-2 py-2 transition-colors hover:bg-border rounded-md' href='/search' title='Search'>
        <span class='sr-only'>Search</span>
        <Icon name='search' class='size-5' />
      </a>
    </div>

    {/* buttons */}
    <div class='z-30 flex gap-x-4 group-[.not-top]:gap-x-2' style='transition:gap 0.3s'>
      <button
        id='toggleDarkMode'
        class='group/dark box-content size-5 rounded-md border p-1.5 transition-colors hover:bg-border sm:group-[.not-top]:rounded-xl'
      >
        <span class='sr-only'>Dark Theme</span>
        <Icon class='system size-5 group-hover/dark:text-primary' name='computer' />
        <Icon class='light hidden size-5 group-hover/dark:text-primary' name='sun' />
        <Icon class='dark hidden size-5 group-hover/dark:text-primary' name='moon' />
      </button>
      <button
        id='toggleMenu'
        class='rounded-md border p-1.5 transition-colors hover:bg-border sm:hidden sm:group-[.not-top]:rounded-xl'
      >
        <span class='sr-only'>Menu</span>
        <Icon class='size-5' name='menu' />
      </button>
    </div>
  </div>
</header-component>

{/* Use inline to load icon quicker firstly */}
<script is:inline>
  const toggleDarkModeElement = document.getElementById('toggleDarkMode')
  if (toggleDarkModeElement) {
    toggleDarkModeElement.dataset.theme = localStorage.getItem('theme') || 'system'
  }
</script>
<script>
  import { setTheme, showToast } from '../../utils'

  class Header extends HTMLElement {
    private moreMenuOpen = false

    constructor() {
      super()
    }

    connectedCallback() {
      // Header
      let preScrollY = window.scrollY
      this.classList.toggle('not-top', preScrollY > 20)
      window.addEventListener('scroll', () => {
        this.classList.toggle('not-top', window.scrollY > 20)
        this.dataset.show = (window.scrollY < 350 || window.scrollY < preScrollY).toString()
        
        // 滚动时自动关闭更多菜单
        if (this.moreMenuOpen) {
          this.closeMoreMenu()
        }
        
        preScrollY = window.scrollY
      })

      // Dark Mode
      const darkModeBtn = this.querySelector('#toggleDarkMode') as HTMLElement
      darkModeBtn.addEventListener('click', () => {
        // Old way: dispatch event
        // const toggleDarkModeEvent = new CustomEvent('theme-change', {
        //   detail: { theme: localStorage.getItem('theme') === 'light' ? 'dark' : 'light' }
        // })
        // document.dispatchEvent(toggleDarkModeEvent)
        const newTheme = setTheme(undefined, true)
        darkModeBtn.dataset.theme = newTheme
        showToast({ message: `Set theme to ${newTheme}` })
      })

      // Menu (移动端)
      this.querySelector('#toggleMenu')?.addEventListener('click', () => {
        this.classList.toggle('expanded')
      })

      // 更多菜单
      const moreMenuToggle = this.querySelector('#moreMenuToggle') as HTMLElement

      if (moreMenuToggle) {
        moreMenuToggle.addEventListener('click', (e) => {
          e.stopPropagation()
          this.toggleMoreMenu()
        })

        // 点击外部关闭菜单
        document.addEventListener('click', (e) => {
          if (!this.contains(e.target as Node)) {
            this.closeMoreMenu()
          }
        })

        // 点击菜单项后关闭菜单
        const moreMenuDropdown = this.querySelector('#moreMenuDropdown') as HTMLElement
        if (moreMenuDropdown) {
          moreMenuDropdown.addEventListener('click', (e) => {
            if ((e.target as HTMLElement).tagName === 'A') {
              this.closeMoreMenu()
            }
          })
        }
      }
    }

    private toggleMoreMenu() {
      if (this.moreMenuOpen) {
        this.closeMoreMenu()
      } else {
        this.openMoreMenu()
      }
    }

    private openMoreMenu() {
      const moreMenuDropdown = this.querySelector('#moreMenuDropdown') as HTMLElement
      const moreMenuIcon = this.querySelector('#moreMenuIcon') as HTMLElement
      
      this.moreMenuOpen = true
      moreMenuDropdown.classList.remove('opacity-0', 'invisible', 'translate-y-[-10px]')
      moreMenuDropdown.classList.add('opacity-100', 'visible', 'translate-y-0')
      moreMenuIcon.style.transform = 'rotate(180deg)'
    }

    private closeMoreMenu() {
      const moreMenuDropdown = this.querySelector('#moreMenuDropdown') as HTMLElement
      const moreMenuIcon = this.querySelector('#moreMenuIcon') as HTMLElement
      
      this.moreMenuOpen = false
      moreMenuDropdown.classList.remove('opacity-100', 'visible', 'translate-y-0')
      moreMenuDropdown.classList.add('opacity-0', 'invisible', 'translate-y-[-10px]')
      moreMenuIcon.style.transform = 'rotate(0deg)'
    }
  }

  customElements.define('header-component', Header)
</script>

<style>
  header-component {
    transition:
      padding 0.3s,
      transform 0.3s,
      margin-inline 0.3s,
      border 0.15s,
      background-color 0.15s,
      width 0.3s,
      border-radius 0.3s;

    &.not-top {
      --un-border-opacity: 1;
      border-color: hsl(var(--border) / var(--un-border-opacity));
      --un-bg-opacity: 1;
      background-color: hsl(var(--background) / var(--un-bg-opacity));
      padding-left: 0.375rem;
      padding-right: 0.375rem;
      box-shadow:
        rgb(255, 255, 255) 0px 0px 0px 0px,
        rgba(24, 24, 27, 0.08) 0px 0px 0px 1px,
        rgba(39, 39, 42, 0.08) 0px 10px 15px -3px,
        rgba(39, 39, 42, 0.08) 0px 4px 6px -4px;
    }
    &[data-show='false']:not(.expanded) {
      transform: translateY(-5rem);
    }
  }
  
  @media (min-width: 640px) {
    header-component.not-top {
      /* 收缩时变成长方形，向右收缩 */
      margin-inline: auto;
      margin-left: auto;
      margin-right: 2rem;
      width: fit-content;
      border-radius: 1rem;
    }
  }
  
  @media (min-width: 800px) {
    header-component:not(.not-top) {
      margin-inline: 0;
    }
    header-component.not-top {
      margin-right: 4rem;
    }
  }
  
  :global(.dark) header-component.not-top {
    background-color: hsl(var(--muted) / var(--un-bg-opacity));
  }

  /* 更多菜单样式 */
  #moreMenuDropdown {
    z-index: 50;
  }
  
  :global(.dark) #moreMenuDropdown {
    background-color: hsl(var(--background) / var(--un-bg-opacity));
    border-color: hsl(var(--border) / var(--un-border-opacity));
  }

  /* header menu */
  @media (max-width: 640px) {
    #headerExpandContent {
      grid-template-rows: 0fr;
      transition:
        opacity 0.3s,
        padding 0.3s,
        border-color 0.15s,
        grid-template-rows 0.3s;
    }
    .expanded #headerExpandContent {
      grid-template-rows: 1fr;
    }
    .expanded.not-top #headerExpandContent {
      box-shadow:
        rgb(255, 255, 255) 0px 0px 0px 0px,
        rgba(24, 24, 27, 0.08) 0px 0px 0px 1px,
        rgba(39, 39, 42, 0.08) 0px 10px 15px -3px,
        rgba(39, 39, 42, 0.08) 0px 4px 6px -4px;
    }

    /* header component after */
    header-component #headerExpandContent::after {
      box-sizing: content-box;
      content: '';
      position: absolute;
      inset-inline: calc(-1rem - 1px);
      bottom: 0;
      top: -5rem;
      z-index: -1;
      transition: 0.3s;
      visibility: hidden;
      opacity: 0;
      border-bottom: 1px solid transparent;
    }
    header-component:not(.not-top) #headerExpandContent::after {
      visibility: visible;
      bottom: -1rem;
      opacity: 1;
      background-color: hsl(var(--muted) / var(--un-bg-opacity, 1));
      border-bottom-color: hsl(var(--border) / var(--un-border-opacity, 1));
    }
  }

  /* dark light mode toggle */
  #toggleDarkMode {
    &[data-theme='dark'] {
      & .system {
        display: none;
      }
      & .dark {
        display: block;
      }
    }
    &[data-theme='light'] {
      & .system {
        display: none;
      }
      .light {
        display: block;
      }
    }
  }
</style>
